// paremeters are nothing but varaiables.tf in terraform
// ansiColor('xterm') --> coloring pluggin
// wait:false means here , sg creation complete aagovargu vpc build mugibeka bedva antha, and if sg build fails , vpc also fails ; since vpc doesnt depend on sg wait is fals ; by default its true

pipeline {
    agent {
        label 'AGENT-1'
    }
    options{
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
    parameters {
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'Select the action for terraform')
    }
    stages {
        stage('init and plan') { 
                steps {
                    withAWS(region: 'us-east-1', credentials: 'aws-cred')
                    sh 'cd 9.CDN' 
                    sh 'terraform init -reconfigure'
                    sh 'terraform plan -out expensetf'
                }      
            }
        stage('apply and destroy') {
                steps {     
                    withAWS(region: 'us-east-1', credentials: 'aws-cred')
                    sh """
                    cd 9.CDN
                    if [ ${params.ACTION} == apply ]
                    then
                        terraform apply -auto-approve expensetf
                    else
                        terraform destroy -auto-approve
                    fi
                    """
                }
            }
        stage('Destroy'){
            when {
                expression { params.ACTION == 'destroy' }
            }
            steps{
                withAWS(region: 'us-east-1', credentials: 'aws-cred') {
                    script {
                        def directories = ['9.CDN', '8.ALB', '7.ACM', '6.ECR', '5.RDS', '4.EKS', '3.Bastion', '2.SG', '1.VPC']
                        for (dir in directories) {
                            echo "Destroying resources in directory: ${dir}"
                            sh """
                            cd ${dir}
                            terraform init -reconfigure
                            terraform destroy -auto-approve || { echo "Failed to destroy resources in ${dir}"; exit 1; }
                            cd ..
                            """
                        }
            }
                }
            }
        }
    }
    post {
        always {
            echo "this section always runs" 
            deleteDir()                     // delete workspace directory after building 
        }
        success {
            echo " this section runs only when pipeline is success"
            echo " this build is due to webhook trigger"
        }
        failure {
            echo "this section runs only when pipeline is failure"
        }

    }
    
}
